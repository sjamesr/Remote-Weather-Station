diff --git a/src/sensors/digital_input.cpp b/src/sensors/digital_input.cpp
index 28ea41c8..c82e9b1b 100644
--- a/src/sensors/digital_input.cpp
+++ b/src/sensors/digital_input.cpp
@@ -1,5 +1,6 @@
 #include "digital_input.h"
 
+#include <elapsedMillis.h>
 #include <FunctionalInterrupt.h>
 
 #include "sensesp.h"
@@ -53,14 +54,22 @@ bool DigitalInputState::set_configuration(const JsonObject& config) {
 DigitalInputCounter::DigitalInputCounter(uint8_t pin, int pin_mode,
                                          int interrupt_type, uint read_delay,
                                          String config_path)
+    : DigitalInputCounter(pin, pin_mode, interrupt_type, read_delay,
+        config_path, [this]() {this->counter_++;}) {}
+
+DigitalInputCounter::DigitalInputCounter(uint8_t pin, int pin_mode,
+                                         int interrupt_type, uint read_delay,
+                                         String config_path,
+                                         std::function<void()> interrupt_handler)
     : DigitalInput{pin, pin_mode, interrupt_type, config_path},
       IntegerProducer(),
+      interrupt_handler_{interrupt_handler},
       read_delay_{read_delay} {
   load_configuration();
 }
 
 void DigitalInputCounter::enable() {
-  app.onInterrupt(pin_, interrupt_type_, [this]() { this->counter_++; });
+  app.onInterrupt(pin_, interrupt_type_, interrupt_handler_);
 
   app.onRepeat(read_delay_, [this]() {
     noInterrupts();
@@ -95,6 +104,55 @@ bool DigitalInputCounter::set_configuration(const JsonObject& config) {
   return true;
 }
 
+// DEBOUNCE
+DigitalInputDebounceCounter::DigitalInputDebounceCounter(
+    uint8_t pin, int pin_mode, int interrupt_type, unsigned int read_delay_ms,
+    unsigned int ignore_interval_ms, String config_path)
+    : DigitalInputCounter(pin, pin_mode, interrupt_type, read_delay_ms,
+        config_path, [this]() {this->handleInterrupt();}),
+      ignore_interval_ms_{ignore_interval_ms} {
+}
+
+void DigitalInputDebounceCounter::handleInterrupt() {
+  if (since_last_event_ > ignore_interval_ms_) {
+    this->counter_++;
+    since_last_event_ = 0;
+  }
+}
+
+void DigitalInputDebounceCounter::get_configuration(JsonObject& root) {
+  root["read_delay"] = read_delay_;
+  root["ignore_interval"] = ignore_interval_ms_;
+}
+
+static const char DEBOUNCE_SCHEMA[] PROGMEM = R"###({
+    "type": "object",
+    "properties": {
+        "read_delay": { "title": "Read delay", "type": "number", "description": "The time, in milliseconds, between each read of the input" },
+        "ignore_interval": { "title": "Ignore interval", "type": "number", "description": "The time, in milliseconds, to ignore events after a recorded event" }
+    }
+  })###";
+
+String DigitalInputDebounceCounter::get_config_schema() {
+  return FPSTR(DEBOUNCE_SCHEMA);
+}
+
+bool DigitalInputDebounceCounter::set_configuration(const JsonObject& config) {
+  String expected[] = {"read_delay", "ignore_interval"};
+  for (auto str : expected) {
+    if (!config.containsKey(str)) {
+      debugE(
+          "Cannot set DigitalInputDebounceConfiguration configuration: missing "
+          "json field %s",
+          str.c_str());
+      return false;
+    }
+  }
+
+  read_delay_ = config["read_delay"];
+  ignore_interval_ms_ = config["ignore_interval"];
+  return true;
+}
 
 DigitalInputChange::DigitalInputChange(uint8_t pin, int pin_mode,
                                        int interrupt_type, uint read_delay,
diff --git a/src/sensors/digital_input.h b/src/sensors/digital_input.h
index 9684f1cb..be0c10e1 100644
--- a/src/sensors/digital_input.h
+++ b/src/sensors/digital_input.h
@@ -1,6 +1,8 @@
 #ifndef _digital_input_H_
 #define _digital_input_H_
 
+#include <elapsedMillis.h>
+
 #include "sensor.h"
 
  /**
@@ -94,9 +96,56 @@ class DigitalInputCounter : public DigitalInput, public IntegerProducer {
 
   void enable() override final;
 
- private:
-  uint read_delay_;
+ protected:
+   DigitalInputCounter(uint8_t pin, int pin_mode, int interrupt_type,
+                      uint read_delay, String config_path,
+                      std::function<void()> interrupt_handler);
+
+  std::function<void()> interrupt_handler_;
+
+ protected:
   volatile uint counter_ = 0;
+  uint read_delay_;
+
+ private:
+  virtual void get_configuration(JsonObject& doc) override;
+  virtual bool set_configuration(const JsonObject& config) override;
+  virtual String get_config_schema() override;
+};
+
+/**
+ * @brief DigitalInputDebounceCounter counts interrupts and reports the count
+ * every read_delay ms, but ignores events that happen within
+ * ignore_interval_ms.
+ *
+ * You can use this class if, for example, you have a noisy reed switch that
+ * generates multiple interrupts every time it is actuated.
+ *
+ * @param pin The GPIO pin to which the device is connected
+ *
+ * @param pin_mode Will be INPUT or INPUT_PULLUP
+ *
+ * @param interrupt_type Will be RISING, FALLING, or CHANGE
+ *
+ * @param read_delay_ms How often you want to read the pin, in ms
+ *
+ * @param ignore_interval_ms Ignore events within this interval after a recorded
+ * event.
+ *
+ * @param config_path The path to configuring read_delay in the Config UI
+ */
+class DigitalInputDebounceCounter : public DigitalInputCounter {
+ public:
+  DigitalInputDebounceCounter(uint8_t pin, int pin_mode, int interrupt_type,
+                              unsigned int read_delay_ms,
+                              unsigned int ignore_interval_ms,
+                              String config_path = "");
+
+ private:
+  void handleInterrupt();
+
+  unsigned int ignore_interval_ms_;
+  elapsedMillis since_last_event_ = 0;
   virtual void get_configuration(JsonObject& doc) override;
   virtual bool set_configuration(const JsonObject& config) override;
   virtual String get_config_schema() override;
